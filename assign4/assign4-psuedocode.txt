Steps to Completing Assignment #4
-----------------------------------------

(1) Get Assignment #3 working, submit that via canvas. 

(2) Implement the code for the "client_lcloud_bus_request" function (see below).

(3) In your existing driver code, replace every instance of the io bus request (lcloud_io_bus) with the newly implemented "client_lcloud_bus_request" function.

(4) Run the server in one terminal (Initially using '-v') and run the assignment #4 code in a separate terminal (Once again, initially using '-v').  Debug.

(5) Drink a beer, tea, mountain dew, ... what ever your drink of choice is.  You are done with the 311 projects forever!!!!

Pseudocode for "client_lcloud_bus_request" function
-----------------------------------------

LCloudRegisterFrame client_lcloud_bus_request(LCloudRegisterFrame reg, void *buf) {
    
        // If there isn't an open connection already created
        // Use a global variable 'socket_handle', set initially equal to '-1'.

        // IF 'socket_handle' == -1, there is no open connection.
        // ELSE, there is an open connection.

        // IF there isn't an open connection already created, three things need 
        // to be done.
        //    (a) Setup the address
        //    (b) Create the socket
        //    (c) Create the connection

        if (! (open_connection)) {
            a - setup address
            b - socket()
            c - connect()
        }
        
        // Use the helper function you created in assignment #2 to extract the
        // opcode from the provided register 'reg'
        opcode = extract(reg)
             
        // There are four cases to consider when extracting this opcode.
        
        // CASE 1: read operation (look at the c0 and c2 fields)
        // SEND: (reg) <- Network format : send the register reg to the network
        // after converting the register to 'network format'.
        //
        // RECEIVE: (reg) -> Host format
        //          1024 frame (Data read from that frame)

        // CASE 2: write operation (look at the c0 and c2 fields)
        // SEND: (reg) <- Network format : send the register reg to the network 
        // after converting the register to 'network format'.
        //       buf 1024 (Data to write to that frame)
        //
        // RECEIVE: (reg) -> Host format

        // CASE 3: power off operation
        // SEND: (reg) <- Network format : send the register reg to the network 
        // after converting the register to 'network format'.
        //
        // RECEIVE: (reg) -> Host format
        //
        // Close the socket when finished : reset socket_handle to initial value of -1.
        // close(socket_handle)

        // CASE 4: Other operations (probes, ...)
        // SEND: (reg) <- Network format : send the register reg to the network 
        // after converting the register to 'network format'.
        //
        // RECEIVE: (reg) -> Host format

}
